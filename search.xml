<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>%2F2019%2F09%2F03%2Fpics%2F</url>
    <content type="text"><![CDATA[title:ͼƬdata:Tue Sep 3 18:27:30 2019]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F09%2F03%2Fpython%20file%2F</url>
    <content type="text"><![CDATA[t文本模式 (默认)。x写模式，新建一个文件，如果该文件已存在则会报错。b二进制模式。+打开一个文件进行更新(可读可写)。U通用换行模式（不推荐）。r以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。rb以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。一般用于非文本文件如图片等。r+打开一个文件用于读写。文件指针将会放在文件的开头。rb+以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。一般用于非文本文件如图片等。w打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。wb以二进制格式打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。w+打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。wb+以二进制格式打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。a打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。ab以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。a+打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。ab+以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。]]></content>
  </entry>
  <entry>
    <title><![CDATA[python3 os库的使用]]></title>
    <url>%2F2019%2F09%2F03%2Fpython%20os%2F</url>
    <content type="text"><![CDATA[目录操作获取文件目录os.getcwd()示例： 1path = os.getcwd()#获取当前文件所在的目录 修改工作目录os.chdir()chdir = change direction示例： 12os.chdir(os.chdir(path+"//source"))#进入当前目录的子文件夹 source注意转义字符//的使用]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[raspberry PI操作指南——通过crontab创建定时任务(Linux)]]></title>
    <url>%2F2019%2F09%2F02%2Fraspberry%20PI%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8D%97%E2%80%94%E2%80%94%E9%80%9A%E8%BF%87crontab%E5%88%9B%E5%BB%BA%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1(Linux)%2F</url>
    <content type="text"><![CDATA[单词释义cron:定时任务使用方式123(sudo) crontab -e #编辑定时任务(sudo) crontab -l #列出所有定时任务(sudo) crontab -r #删除当前用户的所有定时任务 加上sudo则针对所有用户，否则只对当前用户生效。 当然你也可以使用 -u 参数来指定特定的用户，这样就无需切换用户了。 123sudo crontab -u 用户名(如 root ) -其他参数如：sudo crontab -u pi -l #查看用户pi的所有定时任务 注意:若首次编辑crontab文件会提示选择编辑器，推荐使用nano crontab 命令示例： 1234#a.每天8:00运行hello.py文件0 8 * * * sudo python hello.py#b.每月1号8:00运行newmonth.py文件0 8 1 * * sudo python newmonth.py 具体使用说明如下: 官方使用说明12345678910111213141516171819202122232425262728293031# Edit this file to introduce tasks to be run bycron.通过编辑这个文件来使定时程序运行特定的任务。# Each task to run has to be defined through a single line# indicating with different fields when the task will be run# and what command to run for the task每行只能定义一个任务，并通过一些特定的字段来指示如何运行这个任务。# To define the time you can provide concrete values for# minute (m), hour (h), day of month (dom), month (mon),# and day of week (dow) or use '*' in these fields (for 'any').你可以通过如下字段来指定任务运行的时间：m:分钟，h:小时，dom:每月的第几天，mon:月份，dow:每星期的第几天，*:任意（分钟，小时等）。使用格式：m h dom mon dow 命令# Notice that tasks will be started based on the cron's system# daemon's notion of time and timezones.需要注意的是，定义在此的所有定时任务的时间都基于当前定时任务系统的时区与时间。# Output of the crontab jobs (including errors) is sent through# email to the user the crontab file belongs to (unless redirected).除非用户重定向邮件发送对象，所有定时任务的日志输出（包括错误）都将通过邮件发送给这个crontab文件所归属的用户邮件目录：/var/mail/# For example, you can run a backup of all your user accounts# at 5 a.m every week with:# 0 5 * * 1 tar -zcf /var/backups/home.tgz /home/比如，如果你想在每周一的上午五点钟备份你的账户，你可以写下如下代码：0 5 * * 1 tar -zcf /var/backups/home.tgz /home/# For more information see the manual pages of crontab(5) and cron(8)更多信息请查找帮助手册# m h dom mon dow command]]></content>
      <tags>
        <tag>raspberryPi</tag>
      </tags>
  </entry>
</search>
