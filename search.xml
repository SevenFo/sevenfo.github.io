<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[git命令的简单使用]]></title>
    <url>%2F2019%2F10%2F03%2Fgit%E5%91%BD%E4%BB%A4%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[之前一直弄不清楚git那些命令，今天终于花了一个多小时的时间熟悉了一边git的一些简单命令，并且解决的一些常见的冲突 git使用的基本流程方法一 在创建远程仓库 以GitHub为例，右上角加号的菜单中选择 new repository,填写相关信息后 create repository,即成功创建仓库. 初始化本地工作区 在git bash 进入到某个文件夹使用命令 1git init 初始化本地工作区 链接远程仓库 1git remote add 该远程仓库名的别称(通常为origin) https://github.com/username/repositoryName 与remote 相关的命令还有 123git remote #查看所有远程仓库名的别称git remote remove #删除某个别称... 提交改动到暂存区(index) 12git add fileNamegit add . 提交改动至本地仓库(local repository) 1git commit -m 'message' 4~5两步一可以采用一个命令 1git commit -a -m 'message' 提交改动至远程仓库(remote repository) 1git push origin(远程仓库别称) master(local branch) master(remote branch) # the remote branchName can be omitted when the local branchName is as same as the remote branchName 注意:此方法因为远程仓库与本地仓库不同因此提交修改到远程仓库时会发生冲突，其解决方案便是先 拉取远程仓库到本地 后再提交修改 12git getch origin &lt;branchName(can be omitted)&gt;git merge origin/master #merge 参数 ：将该分支与本地分支合并 or 1git pull origin master 方法二初始化本地仓库后直接pull远程仓库到本地，后提交修改方法同上，命令同上]]></content>
  </entry>
  <entry>
    <title><![CDATA[github+hexo博客搭建指南]]></title>
    <url>%2F2019%2F10%2F03%2Fgithub-hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97%2F</url>
    <content type="text"><![CDATA[工具的准备与环境配置 安装visual studio codeVS code 是一款由微软出品（好东西！）的轻量级的强大编辑器，通过其强大的插件系统可以很友好地编辑包括JavaScript、python、c++等在内的各种语言的代码文件。在这里我们将用其来编辑后续的hexo配置文件以及书写博客(.md文件)。下载链接：https://code.visualstudio.com/下载-&gt;安装-&gt;成功 安装git工具下载链接: https://git-scm.com/download/win下载后运行安装程序，按照默认配置一路next（其中有一步选择git的默认编辑器可以选择VScode）即可完成安装。 安装Node.jsnode.js作为hexo的依赖环境下载链接：https://nodejs.org/zh-cn/同样一路Next即可 安装hexo打开git bash，进入你想要安装hexo的文件目录（以后的博客文件也将存放于此）运行如下代码 12345npm install -g hexo #安装hexocd you_blog #进入目录hexo init #初始化，即下载hexo的相关文件到该目录hexo g #g :generate 生产网页文件hexo s #s: server 开启本地预览 此时在浏览器中打开 http://localhost:4000 就可以 github的配置 注册GitHub账户网址:https://github.com/ 进入网站-&gt;填写用户名等相关信息-&gt;sign up-&gt;完成新手引导熟悉GitHub-&gt;成功 为博客配置GitHub new repository （新建仓库） 鼠标移至右上角加号即可在菜单中找到该选项。打开后填写相关信息。注意repository name为 user_name.github.io,其余选项保持默认，点击create repository即可！]]></content>
  </entry>
  <entry>
    <title><![CDATA[python3 os库的使用]]></title>
    <url>%2F2019%2F09%2F03%2Fpython%20os%2F</url>
    <content type="text"><![CDATA[python语言中os库包含了大量对系统目录的操作，记录如下 目录操作获取文件目录os.getcwd()示例： 1path = os.getcwd()#获取当前文件所在的目录 修改工作目录os.chdir()chdir = change direction示例： 12os.chdir(os.chdir(path+"//source"))#进入当前目录的子文件夹 source注意转义字符//的使用 文件操作文件操作符 代码 功能 t 文本模式 x 写模式，新建一个文件，如果该文件已存在则会报错。 b 二进制模式。 + 打开一个文件进行更新(可读可写)。 U 通用换行模式（不推荐）。 r 以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。 rb 以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。一般用于非文本文件如图片等。 r+ 打开一个文件用于读写。文件指针将会放在文件的开头。 rb+ 以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。一般用于非文本文件如图片等。 w 打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。 wb 以二进制格式打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。 w+ 打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。 wb+ 以二进制格式打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。 a 打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。 ab 以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。 a+ 打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。 ab+ 以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。 分离文件名中的扩展名os.path.splitext()示例： 123(fName,fEX) = os.path.splitext("hello.md")print('文件名：'+fName)print('扩展名：'+fEX) 输出结果： 12文件名：hello扩展名：.md]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[raspberry PI操作指南——通过crontab创建定时任务(Linux)]]></title>
    <url>%2F2019%2F09%2F02%2Fraspberry%20PI%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8D%97%E2%80%94%E2%80%94%E9%80%9A%E8%BF%87crontab%E5%88%9B%E5%BB%BA%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1(Linux)%2F</url>
    <content type="text"><![CDATA[在使用树莓派过程中发现要经常制定一些定时任务，为了方便记忆与查看，特意记录下来 单词释义cron:定时任务使用方式123(sudo) crontab -e #编辑定时任务(sudo) crontab -l #列出所有定时任务(sudo) crontab -r #删除当前用户的所有定时任务 加上sudo则针对所有用户，否则只对当前用户生效。 当然你也可以使用 -u 参数来指定特定的用户，这样就无需切换用户了。 123sudo crontab -u 用户名(如 root ) -其他参数如：sudo crontab -u pi -l #查看用户pi的所有定时任务 注意:若首次编辑crontab文件会提示选择编辑器，推荐使用nano crontab 命令示例： 123456#a.每天8:00运行hello.py文件0 8 * * * sudo python hello.py#b.每月1号8:00运行newmonth.py文件0 8 1 * * sudo python newmonth.py#c.开机的时候运行run.py脚本@reboot sudo run.py 具体使用说明如下: 官方使用说明12345678910111213141516171819202122232425262728293031# Edit this file to introduce tasks to be run bycron.通过编辑这个文件来使定时程序运行特定的任务。# Each task to run has to be defined through a single line# indicating with different fields when the task will be run# and what command to run for the task每行只能定义一个任务，并通过一些特定的字段来指示如何运行这个任务。# To define the time you can provide concrete values for# minute (m), hour (h), day of month (dom), month (mon),# and day of week (dow) or use '*' in these fields (for 'any').你可以通过如下字段来指定任务运行的时间：m:分钟，h:小时，dom:每月的第几天，mon:月份，dow:每星期的第几天，*:任意（分钟，小时等）。使用格式：m h dom mon dow 命令# Notice that tasks will be started based on the cron's system# daemon's notion of time and timezones.需要注意的是，定义在此的所有定时任务的时间都基于当前定时任务系统的时区与时间。# Output of the crontab jobs (including errors) is sent through# email to the user the crontab file belongs to (unless redirected).除非用户重定向邮件发送对象，所有定时任务的日志输出（包括错误）都将通过邮件发送给这个crontab文件所归属的用户邮件目录：/var/mail/# For example, you can run a backup of all your user accounts# at 5 a.m every week with:# 0 5 * * 1 tar -zcf /var/backups/home.tgz /home/比如，如果你想在每周一的上午五点钟备份你的账户，你可以写下如下代码：0 5 * * 1 tar -zcf /var/backups/home.tgz /home/# For more information see the manual pages of crontab(5) and cron(8)更多信息请查找帮助手册# m h dom mon dow command]]></content>
      <categories>
        <category>树莓派</category>
      </categories>
      <tags>
        <tag>raspberryPi</tag>
      </tags>
  </entry>
</search>
